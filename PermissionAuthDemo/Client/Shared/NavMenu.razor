@using System.Security.Claims

<UserCard></UserCard>
<MudDivider></MudDivider>
<MudNavMenu Class="mt-3">
    <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Outlined.Home">Home</MudNavLink>
   
    @if (_canViewUsers || _canViewRoles)
    {
        <MudListSubheader Class="mt-2 mb-n2">Administration</MudListSubheader>
        @if (_canViewUsers)
        {
            <MudNavLink Href="/identity/users" Icon="@Icons.Material.Outlined.Person">
                Users
            </MudNavLink>
        }
        @if (_canViewRoles)
        {
            <MudNavLink Href="/identity/roles" Icon="@Icons.Material.Outlined.Person">Roles</MudNavLink>
        }
    }
    @if (_canViewProducts || _canViewBrands)
    {
        <MudListSubheader Class="mt-2 mb-n2">Catalog Management</MudListSubheader>
        @if (_canViewProducts)
        {
            <MudNavLink Href="/catalog/products" Icon="@Icons.Material.Outlined.CallToAction">
                Products
            </MudNavLink>
        }
        @if (_canViewBrands)
        {
            <MudNavLink Href="/catalog/brands" Icon="@Icons.Material.Outlined.CallToAction">
                Brands
            </MudNavLink>
        }
    }
</MudNavMenu>

@code {
    private ClaimsPrincipal _authenticationStateProviderUser;
    
    private bool _canViewRoles;
    private bool _canViewUsers;
    private bool _canViewProducts;
    private bool _canViewBrands;

    protected override async Task OnParametersSetAsync()
    {
        _authenticationStateProviderUser = await _stateProvider.GetAuthenticationStateProviderUserAsync();
        _canViewRoles = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Roles.View)).Succeeded;
        _canViewUsers = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Users.View)).Succeeded;
        _canViewProducts = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Products.View)).Succeeded;
        _canViewBrands = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Brands.View)).Succeeded;
    }
}